c
get edit_status_bug_path(bug)
c
n
allow_any_instance_of(Bug).to receive(:update).and_return(false)
c
nc
n
nn
n
c
n
 @user_projects = UserProject.return_related_to_project(@project.id)
c
n
user_project = build(:user_project, user: nil, project:project)
c
      user_project = build(:user_project, project: project,user: nil) 
      user_project = create(:user_project, project: project,user: nil) 
      user_project = create(:user_project, project: project) 
c
@user_projects.destroy_all
if @user_projects.destroy_all
user_projects = UserProject.return_related_to_project(@project.id)
      expect(flash[:alert]).to eq('Project not deleted!')
c
      delete project_path(project)
      allow(user_project.project.user_projects).to receive(:destroy_all).and_return(false)
c
      delete project_path(project)
      delete :destroy, params: { id: project.id }
      allow_any_instance_of(UserProject::ActiveRecord_Relation).to receive(:destroy_all).and_return(false)
      user_project = build(:user_project, user: user, project:project)
user_project = build(:user_project)
c
response.body
request
c
      expect(bug.screenshot).to be_attached
c
      is_expected(described_class).to have(:screenshot)
c
      expect(bug).to has_one_attached(:screenshot)
c
bug.screenshot
bug
c
expect(response).to have_http_status(:unprocessable_entity)
expect(project.name).not_to eq(invalid_name)
n
c
request
response.body
project.name
c
response.body
c
response.body
response
request
invalid_name
project
c
expect(response.media_type).to eq('txt/vnd.turbo-stream.html')
response.body
request
projects_path
c
response.body
request
      expect(response.media_type).to eq('txt/vnd.turbo-stream.html')
response.body
request
c
valid_bug_params
c
@bug.errors.full_messages
@bug.valid?
c
user
c
user
c
response.body
response
c
user
c
n
c
@project
c
response.body
c
Bug.count
bug.count
bug
count
response.body
c
response.body
c
response.body
request
c
response.body
c
response.body
c
response.body
request
c
response.body
c
response.body
request
c
request
c
expect(flash[:notice]).to eq(I18n.t('flash.you_have_no_project'))
sign_in
signed_in
current_user
request
c
response.body
sign_in user_without_project
user_without_project
user
c
response.body
request
project
user
c
response
response.body
request
c
c\
project
c
response.body
response
c
response.body
request
response.body
response
request
c
response.body
request
sign_in user
user
c
n
c
e
n
c
request
request.status
response
request
n
request
@request
@request\
n
@request
request
c
session
user_signed_in?
user
n
c
ec
e
n
e
n
c
e
n
sign_in(:user)
sign_in
c
sign_in user
user
c
sign_in user
user
c
 c
c
user
sign_in user
c
sign_in user
sign_in usrer
sign_in
user
c
response.body
sign_in user
user
c
response
response.body
qa_user
sign_in qa_user
c
qa_user
response
sign_in qa_user
sing_in qa_user
c
response.body
sign_in qa_user
qa_user
c
response.body
c
sign_in(current_user, scope: :user)
c
current_user.sign
current_user.signed_in_user?
sign_in(current_user, scope: :user)
sign_in\(current_user, scope: :user)
login_as(current_user, scope: :user)
c
sign_in(:current_user)
c
sign_in(resource, scope: :current_user)
sign_in(resource, scope: :current_user)\
c
sign_in(resource, scope: :current_user)
c
sign_in(user, scope: :current_user)
c
sign_in(current_user, scope: :user)
c
sign_in :user, current_user
current_user
c
current_user
response
@request
c
c\
c
response
c
@user
